// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: keepsake.proto

package servicepb

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetExperimentStatusReply_Status int32

const (
	GetExperimentStatusReply_RUNNING GetExperimentStatusReply_Status = 0
	GetExperimentStatusReply_STOPPED GetExperimentStatusReply_Status = 1
)

// Enum value maps for GetExperimentStatusReply_Status.
var (
	GetExperimentStatusReply_Status_name = map[int32]string{
		0: "RUNNING",
		1: "STOPPED",
	}
	GetExperimentStatusReply_Status_value = map[string]int32{
		"RUNNING": 0,
		"STOPPED": 1,
	}
)

func (x GetExperimentStatusReply_Status) Enum() *GetExperimentStatusReply_Status {
	p := new(GetExperimentStatusReply_Status)
	*p = x
	return p
}

func (x GetExperimentStatusReply_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetExperimentStatusReply_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_keepsake_proto_enumTypes[0].Descriptor()
}

func (GetExperimentStatusReply_Status) Type() protoreflect.EnumType {
	return &file_keepsake_proto_enumTypes[0]
}

func (x GetExperimentStatusReply_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetExperimentStatusReply_Status.Descriptor instead.
func (GetExperimentStatusReply_Status) EnumDescriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{17, 0}
}

type PrimaryMetric_Goal int32

const (
	PrimaryMetric_MAXIMIZE PrimaryMetric_Goal = 0
	PrimaryMetric_MINIMIZE PrimaryMetric_Goal = 1
)

// Enum value maps for PrimaryMetric_Goal.
var (
	PrimaryMetric_Goal_name = map[int32]string{
		0: "MAXIMIZE",
		1: "MINIMIZE",
	}
	PrimaryMetric_Goal_value = map[string]int32{
		"MAXIMIZE": 0,
		"MINIMIZE": 1,
	}
)

func (x PrimaryMetric_Goal) Enum() *PrimaryMetric_Goal {
	p := new(PrimaryMetric_Goal)
	*p = x
	return p
}

func (x PrimaryMetric_Goal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryMetric_Goal) Descriptor() protoreflect.EnumDescriptor {
	return file_keepsake_proto_enumTypes[1].Descriptor()
}

func (PrimaryMetric_Goal) Type() protoreflect.EnumType {
	return &file_keepsake_proto_enumTypes[1]
}

func (x PrimaryMetric_Goal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimaryMetric_Goal.Descriptor instead.
func (PrimaryMetric_Goal) EnumDescriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{21, 0}
}

type CreateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment       *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
	DisableHeartbeat bool        `protobuf:"varint,2,opt,name=disableHeartbeat,proto3" json:"disableHeartbeat,omitempty"`
	Quiet            bool        `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`
}

func (x *CreateExperimentRequest) Reset() {
	*x = CreateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentRequest) ProtoMessage() {}

func (x *CreateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{0}
}

func (x *CreateExperimentRequest) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

func (x *CreateExperimentRequest) GetDisableHeartbeat() bool {
	if x != nil {
		return x.DisableHeartbeat
	}
	return false
}

func (x *CreateExperimentRequest) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

type CreateExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *CreateExperimentReply) Reset() {
	*x = CreateExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentReply) ProtoMessage() {}

func (x *CreateExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentReply.ProtoReflect.Descriptor instead.
func (*CreateExperimentReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{1}
}

func (x *CreateExperimentReply) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type CreateCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoint *Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Quiet      bool        `protobuf:"varint,2,opt,name=quiet,proto3" json:"quiet,omitempty"`
}

func (x *CreateCheckpointRequest) Reset() {
	*x = CreateCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCheckpointRequest) ProtoMessage() {}

func (x *CreateCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCheckpointRequest.ProtoReflect.Descriptor instead.
func (*CreateCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCheckpointRequest) GetCheckpoint() *Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *CreateCheckpointRequest) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

type CreateCheckpointReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoint *Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *CreateCheckpointReply) Reset() {
	*x = CreateCheckpointReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCheckpointReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCheckpointReply) ProtoMessage() {}

func (x *CreateCheckpointReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCheckpointReply.ProtoReflect.Descriptor instead.
func (*CreateCheckpointReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCheckpointReply) GetCheckpoint() *Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

type SaveExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
	Quiet      bool        `protobuf:"varint,2,opt,name=quiet,proto3" json:"quiet,omitempty"`
}

func (x *SaveExperimentRequest) Reset() {
	*x = SaveExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveExperimentRequest) ProtoMessage() {}

func (x *SaveExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveExperimentRequest.ProtoReflect.Descriptor instead.
func (*SaveExperimentRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{4}
}

func (x *SaveExperimentRequest) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

func (x *SaveExperimentRequest) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

type SaveExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *SaveExperimentReply) Reset() {
	*x = SaveExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveExperimentReply) ProtoMessage() {}

func (x *SaveExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveExperimentReply.ProtoReflect.Descriptor instead.
func (*SaveExperimentReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{5}
}

func (x *SaveExperimentReply) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type StopExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentID string `protobuf:"bytes,1,opt,name=experimentID,proto3" json:"experimentID,omitempty"`
}

func (x *StopExperimentRequest) Reset() {
	*x = StopExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExperimentRequest) ProtoMessage() {}

func (x *StopExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExperimentRequest.ProtoReflect.Descriptor instead.
func (*StopExperimentRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{6}
}

func (x *StopExperimentRequest) GetExperimentID() string {
	if x != nil {
		return x.ExperimentID
	}
	return ""
}

type StopExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopExperimentReply) Reset() {
	*x = StopExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExperimentReply) ProtoMessage() {}

func (x *StopExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExperimentReply.ProtoReflect.Descriptor instead.
func (*StopExperimentReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{7}
}

type GetExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentIDPrefix string `protobuf:"bytes,1,opt,name=experimentIDPrefix,proto3" json:"experimentIDPrefix,omitempty"`
}

func (x *GetExperimentRequest) Reset() {
	*x = GetExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentRequest) ProtoMessage() {}

func (x *GetExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{8}
}

func (x *GetExperimentRequest) GetExperimentIDPrefix() string {
	if x != nil {
		return x.ExperimentIDPrefix
	}
	return ""
}

type GetExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *GetExperimentReply) Reset() {
	*x = GetExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentReply) ProtoMessage() {}

func (x *GetExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentReply.ProtoReflect.Descriptor instead.
func (*GetExperimentReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{9}
}

func (x *GetExperimentReply) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type ListExperimentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListExperimentsRequest) Reset() {
	*x = ListExperimentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentsRequest) ProtoMessage() {}

func (x *ListExperimentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentsRequest.ProtoReflect.Descriptor instead.
func (*ListExperimentsRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{10}
}

type ListExperimentsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiments []*Experiment `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
}

func (x *ListExperimentsReply) Reset() {
	*x = ListExperimentsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentsReply) ProtoMessage() {}

func (x *ListExperimentsReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentsReply.ProtoReflect.Descriptor instead.
func (*ListExperimentsReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{11}
}

func (x *ListExperimentsReply) GetExperiments() []*Experiment {
	if x != nil {
		return x.Experiments
	}
	return nil
}

type DeleteExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentID string `protobuf:"bytes,1,opt,name=experimentID,proto3" json:"experimentID,omitempty"`
}

func (x *DeleteExperimentRequest) Reset() {
	*x = DeleteExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentRequest) ProtoMessage() {}

func (x *DeleteExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentRequest.ProtoReflect.Descriptor instead.
func (*DeleteExperimentRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteExperimentRequest) GetExperimentID() string {
	if x != nil {
		return x.ExperimentID
	}
	return ""
}

type DeleteExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExperimentReply) Reset() {
	*x = DeleteExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentReply) ProtoMessage() {}

func (x *DeleteExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentReply.ProtoReflect.Descriptor instead.
func (*DeleteExperimentReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{13}
}

type CheckoutCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckpointIDPrefix string `protobuf:"bytes,1,opt,name=checkpointIDPrefix,proto3" json:"checkpointIDPrefix,omitempty"`
	OutputDirectory    string `protobuf:"bytes,2,opt,name=outputDirectory,proto3" json:"outputDirectory,omitempty"`
	Quiet              bool   `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`
}

func (x *CheckoutCheckpointRequest) Reset() {
	*x = CheckoutCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutCheckpointRequest) ProtoMessage() {}

func (x *CheckoutCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutCheckpointRequest.ProtoReflect.Descriptor instead.
func (*CheckoutCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{14}
}

func (x *CheckoutCheckpointRequest) GetCheckpointIDPrefix() string {
	if x != nil {
		return x.CheckpointIDPrefix
	}
	return ""
}

func (x *CheckoutCheckpointRequest) GetOutputDirectory() string {
	if x != nil {
		return x.OutputDirectory
	}
	return ""
}

func (x *CheckoutCheckpointRequest) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

type CheckoutCheckpointReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckoutCheckpointReply) Reset() {
	*x = CheckoutCheckpointReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutCheckpointReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutCheckpointReply) ProtoMessage() {}

func (x *CheckoutCheckpointReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutCheckpointReply.ProtoReflect.Descriptor instead.
func (*CheckoutCheckpointReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{15}
}

type GetExperimentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentID string `protobuf:"bytes,1,opt,name=experimentID,proto3" json:"experimentID,omitempty"`
}

func (x *GetExperimentStatusRequest) Reset() {
	*x = GetExperimentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentStatusRequest) ProtoMessage() {}

func (x *GetExperimentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentStatusRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentStatusRequest) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{16}
}

func (x *GetExperimentStatusRequest) GetExperimentID() string {
	if x != nil {
		return x.ExperimentID
	}
	return ""
}

type GetExperimentStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetExperimentStatusReply_Status `protobuf:"varint,1,opt,name=status,proto3,enum=service.GetExperimentStatusReply_Status" json:"status,omitempty"`
}

func (x *GetExperimentStatusReply) Reset() {
	*x = GetExperimentStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentStatusReply) ProtoMessage() {}

func (x *GetExperimentStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentStatusReply.ProtoReflect.Descriptor instead.
func (*GetExperimentStatusReply) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{17}
}

func (x *GetExperimentStatusReply) GetStatus() GetExperimentStatusReply_Status {
	if x != nil {
		return x.Status
	}
	return GetExperimentStatusReply_RUNNING
}

type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Created         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	Params          map[string]*ParamType  `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Host            string                 `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	User            string                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Config          *Config                `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	Command         string                 `protobuf:"bytes,7,opt,name=command,proto3" json:"command,omitempty"`
	Path            string                 `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
	PythonPackages  map[string]string      `protobuf:"bytes,9,rep,name=pythonPackages,proto3" json:"pythonPackages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PythonVersion   string                 `protobuf:"bytes,10,opt,name=pythonVersion,proto3" json:"pythonVersion,omitempty"`
	Checkpoints     []*Checkpoint          `protobuf:"bytes,11,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
	KeepsakeVersion string                 `protobuf:"bytes,12,opt,name=keepsakeVersion,proto3" json:"keepsakeVersion,omitempty"`
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{18}
}

func (x *Experiment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Experiment) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Experiment) GetParams() map[string]*ParamType {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Experiment) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Experiment) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Experiment) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Experiment) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Experiment) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Experiment) GetPythonPackages() map[string]string {
	if x != nil {
		return x.PythonPackages
	}
	return nil
}

func (x *Experiment) GetPythonVersion() string {
	if x != nil {
		return x.PythonVersion
	}
	return ""
}

func (x *Experiment) GetCheckpoints() []*Checkpoint {
	if x != nil {
		return x.Checkpoints
	}
	return nil
}

func (x *Experiment) GetKeepsakeVersion() string {
	if x != nil {
		return x.KeepsakeVersion
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// for backwards compatibility
	Storage string `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{19}
}

func (x *Config) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Config) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	Metrics       map[string]*ParamType  `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Step          int64                  `protobuf:"varint,4,opt,name=step,proto3" json:"step,omitempty"`
	Path          string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	PrimaryMetric *PrimaryMetric         `protobuf:"bytes,6,opt,name=primaryMetric,proto3" json:"primaryMetric,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{20}
}

func (x *Checkpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Checkpoint) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Checkpoint) GetMetrics() map[string]*ParamType {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Checkpoint) GetStep() int64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Checkpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Checkpoint) GetPrimaryMetric() *PrimaryMetric {
	if x != nil {
		return x.PrimaryMetric
	}
	return nil
}

type PrimaryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Goal PrimaryMetric_Goal `protobuf:"varint,2,opt,name=goal,proto3,enum=service.PrimaryMetric_Goal" json:"goal,omitempty"`
}

func (x *PrimaryMetric) Reset() {
	*x = PrimaryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryMetric) ProtoMessage() {}

func (x *PrimaryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryMetric.ProtoReflect.Descriptor instead.
func (*PrimaryMetric) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{21}
}

func (x *PrimaryMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrimaryMetric) GetGoal() PrimaryMetric_Goal {
	if x != nil {
		return x.Goal
	}
	return PrimaryMetric_MAXIMIZE
}

type ParamType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ParamType_BoolValue
	//	*ParamType_IntValue
	//	*ParamType_FloatValue
	//	*ParamType_StringValue
	//	*ParamType_ObjectValueJson
	Value isParamType_Value `protobuf_oneof:"value"`
}

func (x *ParamType) Reset() {
	*x = ParamType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keepsake_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamType) ProtoMessage() {}

func (x *ParamType) ProtoReflect() protoreflect.Message {
	mi := &file_keepsake_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamType.ProtoReflect.Descriptor instead.
func (*ParamType) Descriptor() ([]byte, []int) {
	return file_keepsake_proto_rawDescGZIP(), []int{22}
}

func (m *ParamType) GetValue() isParamType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ParamType) GetBoolValue() bool {
	if x, ok := x.GetValue().(*ParamType_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *ParamType) GetIntValue() int64 {
	if x, ok := x.GetValue().(*ParamType_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *ParamType) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*ParamType_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *ParamType) GetStringValue() string {
	if x, ok := x.GetValue().(*ParamType_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ParamType) GetObjectValueJson() string {
	if x, ok := x.GetValue().(*ParamType_ObjectValueJson); ok {
		return x.ObjectValueJson
	}
	return ""
}

type isParamType_Value interface {
	isParamType_Value()
}

type ParamType_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=boolValue,proto3,oneof"`
}

type ParamType_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=intValue,proto3,oneof"`
}

type ParamType_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=floatValue,proto3,oneof"`
}

type ParamType_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=stringValue,proto3,oneof"`
}

type ParamType_ObjectValueJson struct {
	ObjectValueJson string `protobuf:"bytes,5,opt,name=objectValueJson,proto3,oneof"`
}

func (*ParamType_BoolValue) isParamType_Value() {}

func (*ParamType_IntValue) isParamType_Value() {}

func (*ParamType_FloatValue) isParamType_Value() {}

func (*ParamType_StringValue) isParamType_Value() {}

func (*ParamType_ObjectValueJson) isParamType_Value() {}

var File_keepsake_proto protoreflect.FileDescriptor

var file_keepsake_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x73, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x22, 0x4c, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x69, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x69, 0x65,
	0x74, 0x22, 0x4c, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x62, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75,
	0x69, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x3b, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13,
	0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x46, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x49, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x3d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x44, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x71, 0x75, 0x69, 0x65, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x40, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x01, 0x22, 0xf4, 0x04, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x73, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x73,
	0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4d, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x22, 0xc4, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x4e, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0x22, 0x0a,
	0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x49, 0x5a,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x10,
	0x01, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x97, 0x06, 0x0a, 0x06, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x6b, 0x65, 0x65, 0x70, 0x73,
	0x61, 0x6b, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keepsake_proto_rawDescOnce sync.Once
	file_keepsake_proto_rawDescData = file_keepsake_proto_rawDesc
)

func file_keepsake_proto_rawDescGZIP() []byte {
	file_keepsake_proto_rawDescOnce.Do(func() {
		file_keepsake_proto_rawDescData = protoimpl.X.CompressGZIP(file_keepsake_proto_rawDescData)
	})
	return file_keepsake_proto_rawDescData
}

var file_keepsake_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_keepsake_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_keepsake_proto_goTypes = []interface{}{
	(GetExperimentStatusReply_Status)(0), // 0: service.GetExperimentStatusReply.Status
	(PrimaryMetric_Goal)(0),              // 1: service.PrimaryMetric.Goal
	(*CreateExperimentRequest)(nil),      // 2: service.CreateExperimentRequest
	(*CreateExperimentReply)(nil),        // 3: service.CreateExperimentReply
	(*CreateCheckpointRequest)(nil),      // 4: service.CreateCheckpointRequest
	(*CreateCheckpointReply)(nil),        // 5: service.CreateCheckpointReply
	(*SaveExperimentRequest)(nil),        // 6: service.SaveExperimentRequest
	(*SaveExperimentReply)(nil),          // 7: service.SaveExperimentReply
	(*StopExperimentRequest)(nil),        // 8: service.StopExperimentRequest
	(*StopExperimentReply)(nil),          // 9: service.StopExperimentReply
	(*GetExperimentRequest)(nil),         // 10: service.GetExperimentRequest
	(*GetExperimentReply)(nil),           // 11: service.GetExperimentReply
	(*ListExperimentsRequest)(nil),       // 12: service.ListExperimentsRequest
	(*ListExperimentsReply)(nil),         // 13: service.ListExperimentsReply
	(*DeleteExperimentRequest)(nil),      // 14: service.DeleteExperimentRequest
	(*DeleteExperimentReply)(nil),        // 15: service.DeleteExperimentReply
	(*CheckoutCheckpointRequest)(nil),    // 16: service.CheckoutCheckpointRequest
	(*CheckoutCheckpointReply)(nil),      // 17: service.CheckoutCheckpointReply
	(*GetExperimentStatusRequest)(nil),   // 18: service.GetExperimentStatusRequest
	(*GetExperimentStatusReply)(nil),     // 19: service.GetExperimentStatusReply
	(*Experiment)(nil),                   // 20: service.Experiment
	(*Config)(nil),                       // 21: service.Config
	(*Checkpoint)(nil),                   // 22: service.Checkpoint
	(*PrimaryMetric)(nil),                // 23: service.PrimaryMetric
	(*ParamType)(nil),                    // 24: service.ParamType
	nil,                                  // 25: service.Experiment.ParamsEntry
	nil,                                  // 26: service.Experiment.PythonPackagesEntry
	nil,                                  // 27: service.Checkpoint.MetricsEntry
	(*timestamppb.Timestamp)(nil),        // 28: google.protobuf.Timestamp
}
var file_keepsake_proto_depIdxs = []int32{
	20, // 0: service.CreateExperimentRequest.experiment:type_name -> service.Experiment
	20, // 1: service.CreateExperimentReply.experiment:type_name -> service.Experiment
	22, // 2: service.CreateCheckpointRequest.checkpoint:type_name -> service.Checkpoint
	22, // 3: service.CreateCheckpointReply.checkpoint:type_name -> service.Checkpoint
	20, // 4: service.SaveExperimentRequest.experiment:type_name -> service.Experiment
	20, // 5: service.SaveExperimentReply.experiment:type_name -> service.Experiment
	20, // 6: service.GetExperimentReply.experiment:type_name -> service.Experiment
	20, // 7: service.ListExperimentsReply.experiments:type_name -> service.Experiment
	0,  // 8: service.GetExperimentStatusReply.status:type_name -> service.GetExperimentStatusReply.Status
	28, // 9: service.Experiment.created:type_name -> google.protobuf.Timestamp
	25, // 10: service.Experiment.params:type_name -> service.Experiment.ParamsEntry
	21, // 11: service.Experiment.config:type_name -> service.Config
	26, // 12: service.Experiment.pythonPackages:type_name -> service.Experiment.PythonPackagesEntry
	22, // 13: service.Experiment.checkpoints:type_name -> service.Checkpoint
	28, // 14: service.Checkpoint.created:type_name -> google.protobuf.Timestamp
	27, // 15: service.Checkpoint.metrics:type_name -> service.Checkpoint.MetricsEntry
	23, // 16: service.Checkpoint.primaryMetric:type_name -> service.PrimaryMetric
	1,  // 17: service.PrimaryMetric.goal:type_name -> service.PrimaryMetric.Goal
	24, // 18: service.Experiment.ParamsEntry.value:type_name -> service.ParamType
	24, // 19: service.Checkpoint.MetricsEntry.value:type_name -> service.ParamType
	2,  // 20: service.Daemon.CreateExperiment:input_type -> service.CreateExperimentRequest
	4,  // 21: service.Daemon.CreateCheckpoint:input_type -> service.CreateCheckpointRequest
	6,  // 22: service.Daemon.SaveExperiment:input_type -> service.SaveExperimentRequest
	8,  // 23: service.Daemon.StopExperiment:input_type -> service.StopExperimentRequest
	10, // 24: service.Daemon.GetExperiment:input_type -> service.GetExperimentRequest
	12, // 25: service.Daemon.ListExperiments:input_type -> service.ListExperimentsRequest
	14, // 26: service.Daemon.DeleteExperiment:input_type -> service.DeleteExperimentRequest
	16, // 27: service.Daemon.CheckoutCheckpoint:input_type -> service.CheckoutCheckpointRequest
	18, // 28: service.Daemon.GetExperimentStatus:input_type -> service.GetExperimentStatusRequest
	3,  // 29: service.Daemon.CreateExperiment:output_type -> service.CreateExperimentReply
	5,  // 30: service.Daemon.CreateCheckpoint:output_type -> service.CreateCheckpointReply
	7,  // 31: service.Daemon.SaveExperiment:output_type -> service.SaveExperimentReply
	9,  // 32: service.Daemon.StopExperiment:output_type -> service.StopExperimentReply
	11, // 33: service.Daemon.GetExperiment:output_type -> service.GetExperimentReply
	13, // 34: service.Daemon.ListExperiments:output_type -> service.ListExperimentsReply
	15, // 35: service.Daemon.DeleteExperiment:output_type -> service.DeleteExperimentReply
	17, // 36: service.Daemon.CheckoutCheckpoint:output_type -> service.CheckoutCheckpointReply
	19, // 37: service.Daemon.GetExperimentStatus:output_type -> service.GetExperimentStatusReply
	29, // [29:38] is the sub-list for method output_type
	20, // [20:29] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_keepsake_proto_init() }
func file_keepsake_proto_init() {
	if File_keepsake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_keepsake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCheckpointReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExperimentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExperimentsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutCheckpointReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keepsake_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_keepsake_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ParamType_BoolValue)(nil),
		(*ParamType_IntValue)(nil),
		(*ParamType_FloatValue)(nil),
		(*ParamType_StringValue)(nil),
		(*ParamType_ObjectValueJson)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keepsake_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_keepsake_proto_goTypes,
		DependencyIndexes: file_keepsake_proto_depIdxs,
		EnumInfos:         file_keepsake_proto_enumTypes,
		MessageInfos:      file_keepsake_proto_msgTypes,
	}.Build()
	File_keepsake_proto = out.File
	file_keepsake_proto_rawDesc = nil
	file_keepsake_proto_goTypes = nil
	file_keepsake_proto_depIdxs = nil
}
