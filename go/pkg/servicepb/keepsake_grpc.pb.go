// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentReply, error)
	CreateCheckpoint(ctx context.Context, in *CreateCheckpointRequest, opts ...grpc.CallOption) (*CreateCheckpointReply, error)
	SaveExperiment(ctx context.Context, in *SaveExperimentRequest, opts ...grpc.CallOption) (*SaveExperimentReply, error)
	StopExperiment(ctx context.Context, in *StopExperimentRequest, opts ...grpc.CallOption) (*StopExperimentReply, error)
	GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentReply, error)
	ListExperiments(ctx context.Context, in *ListExperimentsRequest, opts ...grpc.CallOption) (*ListExperimentsReply, error)
	DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error)
	CheckoutCheckpoint(ctx context.Context, in *CheckoutCheckpointRequest, opts ...grpc.CallOption) (*CheckoutCheckpointReply, error)
	GetExperimentStatus(ctx context.Context, in *GetExperimentStatusRequest, opts ...grpc.CallOption) (*GetExperimentStatusReply, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentReply, error) {
	out := new(CreateExperimentReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/CreateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) CreateCheckpoint(ctx context.Context, in *CreateCheckpointRequest, opts ...grpc.CallOption) (*CreateCheckpointReply, error) {
	out := new(CreateCheckpointReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/CreateCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SaveExperiment(ctx context.Context, in *SaveExperimentRequest, opts ...grpc.CallOption) (*SaveExperimentReply, error) {
	out := new(SaveExperimentReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/SaveExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) StopExperiment(ctx context.Context, in *StopExperimentRequest, opts ...grpc.CallOption) (*StopExperimentReply, error) {
	out := new(StopExperimentReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/StopExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentReply, error) {
	out := new(GetExperimentReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/GetExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) ListExperiments(ctx context.Context, in *ListExperimentsRequest, opts ...grpc.CallOption) (*ListExperimentsReply, error) {
	out := new(ListExperimentsReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/ListExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error) {
	out := new(DeleteExperimentReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/DeleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) CheckoutCheckpoint(ctx context.Context, in *CheckoutCheckpointRequest, opts ...grpc.CallOption) (*CheckoutCheckpointReply, error) {
	out := new(CheckoutCheckpointReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/CheckoutCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetExperimentStatus(ctx context.Context, in *GetExperimentStatusRequest, opts ...grpc.CallOption) (*GetExperimentStatusReply, error) {
	out := new(GetExperimentStatusReply)
	err := c.cc.Invoke(ctx, "/service.Daemon/GetExperimentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
// All implementations must embed UnimplementedDaemonServer
// for forward compatibility
type DaemonServer interface {
	CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentReply, error)
	CreateCheckpoint(context.Context, *CreateCheckpointRequest) (*CreateCheckpointReply, error)
	SaveExperiment(context.Context, *SaveExperimentRequest) (*SaveExperimentReply, error)
	StopExperiment(context.Context, *StopExperimentRequest) (*StopExperimentReply, error)
	GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentReply, error)
	ListExperiments(context.Context, *ListExperimentsRequest) (*ListExperimentsReply, error)
	DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentReply, error)
	CheckoutCheckpoint(context.Context, *CheckoutCheckpointRequest) (*CheckoutCheckpointReply, error)
	GetExperimentStatus(context.Context, *GetExperimentStatusRequest) (*GetExperimentStatusReply, error)
	mustEmbedUnimplementedDaemonServer()
}

// UnimplementedDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServer struct {
}

func (UnimplementedDaemonServer) CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (UnimplementedDaemonServer) CreateCheckpoint(context.Context, *CreateCheckpointRequest) (*CreateCheckpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpoint not implemented")
}
func (UnimplementedDaemonServer) SaveExperiment(context.Context, *SaveExperimentRequest) (*SaveExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExperiment not implemented")
}
func (UnimplementedDaemonServer) StopExperiment(context.Context, *StopExperimentRequest) (*StopExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperiment not implemented")
}
func (UnimplementedDaemonServer) GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiment not implemented")
}
func (UnimplementedDaemonServer) ListExperiments(context.Context, *ListExperimentsRequest) (*ListExperimentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperiments not implemented")
}
func (UnimplementedDaemonServer) DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (UnimplementedDaemonServer) CheckoutCheckpoint(context.Context, *CheckoutCheckpointRequest) (*CheckoutCheckpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutCheckpoint not implemented")
}
func (UnimplementedDaemonServer) GetExperimentStatus(context.Context, *GetExperimentStatusRequest) (*GetExperimentStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentStatus not implemented")
}
func (UnimplementedDaemonServer) mustEmbedUnimplementedDaemonServer() {}

// UnsafeDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServer will
// result in compilation errors.
type UnsafeDaemonServer interface {
	mustEmbedUnimplementedDaemonServer()
}

func RegisterDaemonServer(s grpc.ServiceRegistrar, srv DaemonServer) {
	s.RegisterService(&_Daemon_serviceDesc, srv)
}

func _Daemon_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).CreateExperiment(ctx, req.(*CreateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_CreateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).CreateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/CreateCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).CreateCheckpoint(ctx, req.(*CreateCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SaveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SaveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/SaveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SaveExperiment(ctx, req.(*SaveExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_StopExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).StopExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/StopExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).StopExperiment(ctx, req.(*StopExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetExperiment(ctx, req.(*GetExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_ListExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ListExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/ListExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ListExperiments(ctx, req.(*ListExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).DeleteExperiment(ctx, req.(*DeleteExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_CheckoutCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).CheckoutCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/CheckoutCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).CheckoutCheckpoint(ctx, req.(*CheckoutCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetExperimentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetExperimentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Daemon/GetExperimentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetExperimentStatus(ctx, req.(*GetExperimentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Daemon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExperiment",
			Handler:    _Daemon_CreateExperiment_Handler,
		},
		{
			MethodName: "CreateCheckpoint",
			Handler:    _Daemon_CreateCheckpoint_Handler,
		},
		{
			MethodName: "SaveExperiment",
			Handler:    _Daemon_SaveExperiment_Handler,
		},
		{
			MethodName: "StopExperiment",
			Handler:    _Daemon_StopExperiment_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _Daemon_GetExperiment_Handler,
		},
		{
			MethodName: "ListExperiments",
			Handler:    _Daemon_ListExperiments_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _Daemon_DeleteExperiment_Handler,
		},
		{
			MethodName: "CheckoutCheckpoint",
			Handler:    _Daemon_CheckoutCheckpoint_Handler,
		},
		{
			MethodName: "GetExperimentStatus",
			Handler:    _Daemon_GetExperimentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keepsake.proto",
}
